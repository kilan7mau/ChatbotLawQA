from fastapi import Depends, HTTPException, Request
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from jose import jwt, JWTError, ExpiredSignatureError
import os
from dotenv import load_dotenv
from db.mongoDB import user_collection, blacklist_collection
import torch
import rag_components
from schemas.chat import AppState
from pydantic import ValidationError
from config import SECRET_KEY, ALGORITHM,EMBEDDING_MODEL_NAME,WEAVIATE_COLLECTION_NAME, WEAVIATE_URL
from utils.utils import load_legal_dictionary
import config
from langchain_groq import ChatGroq
from typing import Annotated, Optional
from schemas.user import UserOut, UserRole
from fastapi import status
from datetime import datetime, timezone
from db.redis import get_redis_client # Gi·∫£ s·ª≠ b·∫°n ƒë√£ ƒë·ªãnh nghƒ©a h√†m n√†y trong db/redis.py
from utils.AdvancedLawRetriever import AdvancedLawRetriever
from services.reranker_service import get_reranker_compressor
from db.weaviateDB import connect_to_weaviate
import logging

logger = logging.getLogger(__name__)

handler = logging.StreamHandler()  # G·ª≠i log ƒë·∫øn stdout
handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
logger.addHandler(handler)

# Bearer token security scheme
bearer_scheme = HTTPBearer(auto_error=False)

def get_app_state(request: Request):
    if not hasattr(request.app.state, 'app_state'):
        print("Error in get_app_state: request.app.state.app_state is not set!")
        raise RuntimeError("Application state ('app_state') not found. Initialization failed?")
    return request.app.state.app_state



async def initialize_api_components(app_state: AppState):
    """Kh·ªüi t·∫°o c√°c th√†nh ph·∫ßn c·∫ßn thi·∫øt cho API """
    logger.info("üî∏B·∫Øt ƒë·∫ßu Kh·ªüi t·∫°o API Components")

    load_dotenv()
    # --- Ki·ªÉm tra k·∫øt n·ªëi t·ªõi Redis ---
    app_state.process_input_llm = ChatGroq(model=config.GROQ_MODEL_NAME,temperature=0.2)
    try:
        app_state.redis = await get_redis_client() # G·ªçi h√†m kh·ªüi t·∫°o redis
    except Exception as e:
        logger.error(f"‚ò†Ô∏è L·ªñI NGHI√äM TR·ªåNG khi kh·ªüi t·∫°o Redis trong initialize_api_components: {e}")
        raise
    app_state.dict = load_legal_dictionary(config.LEGAL_DIC_FOLDER+ "/legal_terms.json")
    app_state.weaviateDB = connect_to_weaviate(run_diagnostics=False)
    # --- Ki·ªÉm tra k·∫øt n·ªëi t·ªõi MongoDB ---
    if user_collection is  None or app_state.weaviateDB is None:
        logger.error("üî∏L·ªói k·∫øt n·ªëi t·ªõi MongoDB ho·∫∑c Weaviate.")
        raise HTTPException(status_code=500, detail="L·ªói k·∫øt n·ªëi t·ªõi database.")

    app_state.google_api_key = os.environ.get("GOOGLE_API_KEY")
    if not app_state.google_api_key:
        logger.error("üî∏GG API Key kh√¥ng ƒë∆∞·ª£c cung c·∫•p.")
        raise HTTPException(status_code=500, detail="Missing GG API Key")

    app_state.device = 'cuda' if torch.cuda.is_available() else 'cpu'
    logger.info(f"üî∏S·ª≠ d·ª•ng thi·∫øt b·ªã: {app_state.device}")

    # 1. T·∫£i Embedding Model (gi·ªØ nguy√™n)
    print(f"ƒêang t·∫£i Embedding Model...")
    app_state.embeddings = rag_components.get_huggingface_embeddings(
        EMBEDDING_MODEL_NAME, app_state.device
    )
    if not app_state.embeddings:
        raise HTTPException(status_code=500, detail="Failed to load embedding model")

    # 2. T·∫£i Vector Store
    print(f"ƒêang t·∫£i Vector Store...")
    app_state.vectorstore = rag_components.create_or_load_vectorstore(
        embeddings=app_state.embeddings,
        weaviate_url=WEAVIATE_URL,
        collection_name=WEAVIATE_COLLECTION_NAME,
        weaviate_client=app_state.weaviateDB,
        chunks=None,
    )

    if not app_state.vectorstore:
         raise HTTPException(status_code=500, detail="Failed to load or create Vectorstore")

    # 3. T·∫£i LLM
    logger.info(f"üî∏ƒêang t·∫£i LLM...")

    llm = rag_components.get_google_llm(app_state.google_api_key)
    app_state.llm = llm
    logger.info(f"üî∏T·∫£i LLM (Groq) thanh cong")

    if not app_state.llm:
        raise HTTPException(status_code=500, detail="Failed to load LLM")

    # 4. T·∫°o retriever (gi·ªØ nguy√™n)
    logger.info(f"üî∏ƒêang t·∫°o retriever...")

    app_state.reranker = get_reranker_compressor() # Singleton re-ranker

    app_state.retriever = AdvancedLawRetriever(
        client=app_state.weaviateDB,
        collection_name=WEAVIATE_COLLECTION_NAME,
        llm=app_state.llm,
        reranker=app_state.reranker, # Singleton re-ranker
        embeddings_model=app_state.embeddings
    )

    if app_state.retriever is None:
        raise HTTPException(status_code=500, detail="Failed to create retriever")
    logger.info(f"üî∏ƒê√£ t·∫°o retriever th√†nh c√¥ng.")

    # 5. T·∫°o QA Chain (gi·ªØ nguy√™n)
    logger.info(f"üî∏ƒêang t·∫°o QA Chain...")

    app_state.qa_chain = rag_components.create_qa_chain(
        llm=app_state.llm,
        retriever=app_state.retriever,
        process_input_llm=app_state.process_input_llm
    )
    if app_state.qa_chain is None:
        raise HTTPException(status_code=500, detail="Failed to create QA Chain")

    logger.info(f"üî∏Kh·ªüi t·∫°o API Components ho√†n t·∫•t ")


async def get_access_token_from_cookie(request: Request) -> Optional[str]:
    """
    L·∫•y access token t·ª´ cookie 'access_token_cookie'.
    """
    token = request.cookies.get("access_token_cookie")
    logger.info(f"Token {token}")
    logger.debug(f"GET_ACCESS_TOKEN_FROM_COOKIE: Cookies nh·∫≠n ƒë∆∞·ª£c: {request.cookies}")
    logger.info(f"GET_ACCESS_TOKEN_FROM_COOKIE: Token tr√≠ch xu·∫•t t·ª´ 'access_token_cookie': {'PRESENT' if token else 'MISSING'}")
    return token

async def get_current_user(
    request: Request,
    token_from_cookie: Optional[str] = Depends(get_access_token_from_cookie),
    auth_header: Optional[HTTPAuthorizationCredentials] = Depends(bearer_scheme) # S·∫Ω raise 403 n·∫øu header Auth sai format
) -> UserOut:
    logger.warning("GET_CURRENT_USER: *** B·∫ÆT ƒê·∫¶U X√ÅC TH·ª∞C ***") # S·∫Ω kh√¥ng th·∫•y log n√†y n·∫øu bearer_scheme raise 403

    token_to_verify: Optional[str] = None
    source_of_token: str = "NONE"

    if token_from_cookie:
        token_to_verify = token_from_cookie
        source_of_token = "COOKIE"
        logger.info("GET_CURRENT_USER: S·ª≠ d·ª•ng token t·ª´ cookie.")
    elif auth_header: # Ch·ªâ d√πng n·∫øu kh√¥ng c√≥ token t·ª´ cookie
        token_to_verify = auth_header.credentials
        source_of_token = "AUTHORIZATION_HEADER"
        logger.info("GET_CURRENT_USER: Kh√¥ng c√≥ token t·ª´ cookie, s·ª≠ d·ª•ng token t·ª´ Authorization header.")
    # Kh√¥ng c·∫ßn else, 'if not token_to_verify' ·ªü d∆∞·ªõi s·∫Ω x·ª≠ l√Ω

    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Kh√¥ng th·ªÉ x√°c th·ª±c ng∆∞·ªùi d√πng. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.",
        headers={"WWW-Authenticate": "Bearer"}, # Th√™m header n√†y l√† good practice
    )

    if not token_to_verify:
        logger.error(f"GET_CURRENT_USER: *** KH√îNG T√åM TH·∫§Y TOKEN (Ngu·ªìn: {source_of_token}) - RAISING 401 ***")
        raise credentials_exception

    logger.info(f"GET_CURRENT_USER: Token ƒë·ªÉ verify (ngu·ªìn: {source_of_token}): {token_to_verify[:20]}...")

    # 1. Ki·ªÉm tra token trong blacklist
    try:
        logger.info("GET_CURRENT_USER: ƒêang ki·ªÉm tra blacklist...")
        is_blacklisted = blacklist_collection.find_one({"token": token_to_verify})
        if is_blacklisted:
            logger.error(f"GET_CURRENT_USER: *** TOKEN TRONG BLACKLIST - RAISING 401 ***")
            raise HTTPException( # S·ª≠ d·ª•ng credentials_exception ho·∫∑c m·ªôt c√°i c·ª• th·ªÉ h∆°n
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Token ƒë√£ b·ªã thu h·ªìi ho·∫∑c kh√¥ng h·ª£p l·ªá.",
                headers={"WWW-Authenticate": "Bearer"},
            )
        logger.info("GET_CURRENT_USER: Token kh√¥ng trong blacklist - OK")
    except HTTPException:
        raise
    except Exception as db_error:
        logger.error(f"GET_CURRENT_USER: *** L·ªñI DATABASE BLACKLIST: {db_error} ***")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="L·ªói m√°y ch·ªß khi ki·ªÉm tra tr·∫°ng th√°i token."
        )

    # 2. Gi·∫£i m√£ v√† x√°c th·ª±c JWT
    payload: Optional[dict] = None
    email: Optional[str] = None
    try:
        logger.info("GET_CURRENT_USER: ƒêang decode JWT...")
        if not SECRET_KEY: # Ki·ªÉm tra n√†y quan tr·ªçng
            logger.error("GET_CURRENT_USER: *** SECRET_KEY CH∆ØA ƒê∆Ø·ª¢C C·∫§U H√åNH ***")
            raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="L·ªói c·∫•u h√¨nh m√°y ch·ªß.")

        payload = jwt.decode(token_to_verify, SECRET_KEY, algorithms=[ALGORITHM])
        logger.info(f'CHECK: {payload}')
        email = payload.get("sub")
        exp = payload.get("exp")

        logger.info(f"GET_CURRENT_USER: JWT decode th√†nh c√¥ng - email: {email}, exp: {exp}")

        if not isinstance(email, str) or not email:
            logger.error("GET_CURRENT_USER: *** EMAIL KH√îNG H·ª¢P L·ªÜ TRONG TOKEN ***")
            raise credentials_exception # S·ª≠ d·ª•ng l·∫°i credentials_exception ƒë√£ ƒë·ªãnh nghƒ©a
        if not isinstance(exp, int): # Th∆∞·ªùng 'exp' l√† int (timestamp)
            logger.error("GET_CURRENT_USER: *** EXP KH√îNG H·ª¢P L·ªÜ TRONG TOKEN ***")
            raise credentials_exception

        expiration_datetime = datetime.fromtimestamp(exp, tz=timezone.utc)
        current_datetime_utc = datetime.now(tz=timezone.utc)

        if expiration_datetime < current_datetime_utc:
            logger.error(f"GET_CURRENT_USER: *** TOKEN H·∫æT H·∫†N - RAISING 401 ***")
            raise HTTPException( # S·ª≠ d·ª•ng credentials_exception ho·∫∑c m·ªôt c√°i c·ª• th·ªÉ h∆°n
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Token ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.",
                headers={"WWW-Authenticate": "Bearer"},
            )
        logger.info(f"GET_CURRENT_USER: Token c√≤n h·∫°n - OK")

    except ExpiredSignatureError: # B·∫Øt l·ªói c·ª• th·ªÉ n√†y t·ª´ PyJWT
        logger.error(f"GET_CURRENT_USER: *** TOKEN H·∫æT H·∫†N (ExpiredSignatureError) ***")
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Token ƒë√£ h·∫øt h·∫°n (JWT validation). Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.",
            headers={"WWW-Authenticate": "Bearer"},
        )
    except JWTError as e: # B·∫Øt l·ªói chung t·ª´ PyJWT
        logger.error(f"GET_CURRENT_USER: *** L·ªñI JWT: {e} ***")
        raise HTTPException( # C√≥ th·ªÉ d√πng credentials_exception ho·∫∑c th√¥ng b√°o c·ª• th·ªÉ h∆°n
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail=f"Token kh√¥ng h·ª£p l·ªá ho·∫∑c c√≥ v·∫•n ƒë·ªÅ khi gi·∫£i m√£.", # Th√¥ng b√°o chung chung h∆°n
            headers={"WWW-Authenticate": "Bearer"},
        )
    except HTTPException: # Re-raise n·∫øu l√† HTTPException ƒë√£ ƒë∆∞·ª£c raise t·ª´ b√™n trong try
        raise
    except Exception as e_decode: # B·∫Øt c√°c l·ªói kh√¥ng mong mu·ªën kh√°c
        logger.error(f"GET_CURRENT_USER: *** L·ªñI KH√îNG X√ÅC ƒê·ªäNH KHI DECODE JWT: {e_decode} ***")
        raise credentials_exception # Tr·∫£ v·ªÅ l·ªói chung

    # 3. L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ database
    user_data: Optional[dict] = None # Kh·ªüi t·∫°o ƒë·ªÉ tr√°nh UnboundLocalError
    try:
        logger.info(f"GET_CURRENT_USER: ƒêang t√¨m user trong DB: {email.lower()}") # email ƒë√£ ƒë∆∞·ª£c validate l√† str
        user_data = user_collection.find_one({"email": email.lower()}, {"password": 0, "_id": 0})
        # print(user_data) # B·ªè print trong production

        if user_data is None:
            logger.error(f"GET_CURRENT_USER: *** KH√îNG T√åM TH·∫§Y USER TRONG DB ({email.lower()}) - RAISING 401 ***")
            raise credentials_exception

        logger.info(f"GET_CURRENT_USER: T√¨m th·∫•y user - data: {user_data}")

    except HTTPException:
        raise
    except Exception as db_user_error:
        logger.error(f"GET_CURRENT_USER: *** L·ªñI DATABASE USER: {db_user_error} ***")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="L·ªói m√°y ch·ªß khi truy xu·∫•t th√¥ng tin ng∆∞·ªùi d√πng."
        )

    # 4. T·∫°o ƒë·ªëi t∆∞·ª£ng UserOut v√† ki·ªÉm tra is_active
    try:

        if user_data and ('username' not in user_data or not user_data.get('username')):
            user_data['username'] = email.lower().split('@')[0]
            logger.info(f"GET_CURRENT_USER: Set default username: {user_data['username']}")

        user = UserOut(**user_data)

        if not user.is_active:
            logger.error(f"GET_CURRENT_USER: *** T√ÄI KHO·∫¢N B·ªä KH√ìA ({user.email}) - RAISING 403 ***")
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN, # 403 l√† ph√π h·ª£p ·ªü ƒë√¢y
                detail="T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kh√≥a ho·∫∑c kh√¥ng ho·∫°t ƒë·ªông. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.",
            )

        logger.info(f"GET_CURRENT_USER: *** X√ÅC TH·ª∞C TH√ÄNH C√îNG *** - User: {user.email}, Active: {user.is_active}, Role: {user.role}")

        return user

    except ValidationError as ve:
        logger.error(f"GET_CURRENT_USER: *** L·ªñI PYDANTIC VALIDATION: {ve.errors()} ***")
        logger.error(f"GET_CURRENT_USER: D·ªØ li·ªáu g√¢y l·ªói: {user_data}")
        raise HTTPException(
            status_code=status.HTTP_422_UNPROCESSABLE_ENTITY, # 422 khi d·ªØ li·ªáu kh√¥ng th·ªÉ x·ª≠ l√Ω
            detail=f"D·ªØ li·ªáu ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá t·ª´ DB: {ve.errors()}" # C√≥ th·ªÉ tr·∫£ v·ªÅ l·ªói c·ª• th·ªÉ n·∫øu an to√†n
        )
    except HTTPException: # Re-raise
        raise
    except Exception as e_userout:
        logger.error(f"GET_CURRENT_USER: *** L·ªñI T·∫†O USEROUT HO·∫∂C KI·ªÇM TRA IS_ACTIVE: {e_userout} ***")
        raise credentials_exception # L·ªói chung n·∫øu kh√¥ng r√µ nguy√™n nh√¢n

async def admin_required(
    current_user: Annotated[UserOut, Depends(get_current_user)]
) -> UserOut:
    """
    Dependency ki·ªÉm tra ng∆∞·ªùi d√πng hi·ªán t·∫°i c√≥ quy·ªÅn admin hay kh√¥ng.
    Tr·∫£ v·ªÅ th√¥ng tin ng∆∞·ªùi d√πng n·∫øu c√≥ quy·ªÅn admin, n·∫øu kh√¥ng raise HTTPException.

    Usage:
        @router.get("/admin-only")
        async def admin_route(user: UserOut = Depends(admin_required)):
            return {"message": "You have admin access"}
    """
    if not current_user.role or current_user.role not in [UserRole.ADMIN]:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p ch·ª©c nƒÉng n√†y",
            headers={"WWW-Authenticate": "Bearer"},
        )
    return current_user
